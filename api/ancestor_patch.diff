diff --git a/api/datastore.py b/api/datastore.py
index e227d64..7458f2b 100644
--- a/api/datastore.py
+++ b/api/datastore.py
@@ -39,44 +39,44 @@ class Pins(Greenup):
 
 	@classmethod
 	def by_message(cls, message):
-		bc = Pins.all().filter('message =', message).get()
+		bc = Pins.all().ancestor(Pins.app_key()).filter('message =', message).get()
 		return bc
 
 	@classmethod
 	def by_type(cls, pinType):
-		bt = Pins.all().filter('pinType =', pinType).get()
+		bt = Pins.all().ancestor(Pins.app_key()).filter('pinType =', pinType).get()
 		return bt
 
 	@classmethod
 	def by_lat(cls,lat, offset=None):
 		if not offset:
-			latitudes = Pins.all().filter('lat =', lat)
+			latitudes = Pins.all().ancestor(Pins.app_key()).filter('lat =', lat)
 			return latitudes
 		else:
-			latitudes = Pins.all().filter('lat >=', lat).filter('lat <=', lat + offset)
+			latitudes = Pins.all().ancestor(Pins.app_key()).filter('lat >=', lat).filter('lat <=', lat + offset)
 		return latitudes
 
 	@classmethod
 	def by_lon(cls,lon, offset=None):
 		if not offset:
-			longitudes = Pins.all().filter('lon =', lon)
+			longitudes = Pins.all().ancestor(Pins.app_key()).filter('lon =', lon)
 		else:
-			longitudes = Pins.all().filter('lon >=', lon).filter('lon <=', lon + offset)
+			longitudes = Pins.all().ancestor(Pins.app_key()).filter('lon >=', lon).filter('lon <=', lon + offset)
 		return longitudes
 
 	@classmethod
 	def get_all_pins(cls):
-		pins = Pins.all()
+		pins = Pins.all().ancestor(Pins.app_key())
 		return pins
 
 	@classmethod
 	def by_lat_and_lon(cls, lat, latOffset, lon, lonOffset):
 		if not latOffset:
-			both = Pins.all().filter('lon =', lon).filter('lat =', lat)
+			both = Pins.all().ancestor(Pins.app_key()).filter('lon =', lon).filter('lat =', lat)
 			return both
 		else:
-			longitudes = Pins.all().filter('lon >=', lon).filter('lon <=', lon + offset)
-			latitudes = Pins.all().filter('lat >=', lat).filter('lat <=', lat + offset)
+			longitudes = Pins.all().ancestor(Pins.app_key()).filter('lon >=', lon).filter('lon <=', lon + offset)
+			latitudes = Pins.all().ancestor(Pins.app_key()).filter('lat >=', lat).filter('lat <=', lat + offset)
 		return longitudes, latitudes
 
 class Comments(Greenup):
@@ -92,12 +92,12 @@ class Comments(Greenup):
 	
 	@classmethod
 	def by_type(cls,cType):
-		ct = Comments.all().filter('commentType =', cType).get()	
+		ct = Comments.all().ancestor(Comments.app_key()).filter('commentType =', cType).get()	
 		return ct
 
 	@classmethod
 	def by_type_pagination(cls, cType):
-		ct = Comments.all().filter('commentType =', cType)
+		ct = Comments.all().ancestor(Comments.app_key()).filter('commentType =', cType)
 		return ct
 
 class GridPoints(Greenup):
@@ -111,36 +111,30 @@ class GridPoints(Greenup):
 
 	@classmethod
 	def by_lat(cls,lat):
-		latitudes = GridPoints.all().filter('lat =', lat).get()
+		latitudes = GridPoints.all().ancestor(GridPoints.app_key()).filter('lat =', lat).get()
 		return latitudes
 
 	@classmethod
 	def by_lon(cls,lon):
-		longitudes = GridPoints.all().filter('lon =', lon).get()
+		longitudes = GridPoints.all().ancestor(GridPoints.app_key()).filter('lon =', lon).get()
 		return longitudes
 
 	@classmethod
 	def by_latOffset(cls, latDegrees, offset):
 		# query all points with a latitude between latDegrees and offset
 		# this defines a chunk of the map containing the desired points
-		q = GridPoints().all().filter('lat >=', latDegrees).filter('lat <=', latDegrees + offset).get()
+		q = GridPoints().all().ancestor(GridPoints.app_key()).filter('lat >=', latDegrees).filter('lat <=', latDegrees + offset).get()
 		return q
 
 	@classmethod
 	def by_lonOffset(cls, lonDegrees, offset):
 		# query all points with a latitude between lonDegrees and offset
-		q = GridPoints().all().filter('lon >=', lonDegrees).filter('lon <=', lonDegrees + offset).get()
+		q = GridPoints().all().ancestor(GridPoints.app_key()).filter('lon >=', lonDegrees).filter('lon <=', lonDegrees + offset).get()
 		return q
 
 	@classmethod
 	def get_all_delayed(cls):
-		return GridPoints.all()
-
-	# then we need to make a function that runs through that chunk and bucket-izes each point by rounding it (and stores the 
-	# seconds worked for each of those points that went into the bucket) [see bucket sort or alpha sort]. this could be a function
-	# separate from the datastore. 
-	# we are returing these buckets (the rounded center of each of those buckets, and the total seconds worked corresponding to
-	# each of those buckets).
+		return GridPoints.all().ancestor(GridPoints.app_key())
 
 '''
 	Abstraction Layer between the user and the datastore, containing methods to processes requests by the endpoints.
@@ -229,7 +223,7 @@ def initialPage(typeFilter=None):
 		set up initial page in memecache and the initial cursor. This will guarantee that at least one key and page will be 
 		in the cache (the first one).
 	'''
-	querySet = Comments.all()
+	querySet = Comments.all().ancestor(Comments.app_key())
 	initialCursorKey = 'greeunup_comment_paging_cursor_%s_%s' %(typeFilter,1)
 	initialPageKey = 'greenup_comments_page_%s_%s' %(typeFilter,1)
 
@@ -254,7 +248,7 @@ def paging(page=1,typeFilter=None):
 	if typeFilter is not None and typeFilter is not "":
 		querySet = Comments.by_type_pagination(typeFilter)
 	else:
-		querySet = Comments.all()
+		querySet = Comments.all().ancestor(Pins.app_key())
 
 	currentCursorKey = 'greeunup_comment_paging_cursor_%s_%s' %(typeFilter, page)
 	pageInCache = memcache.get(currentCursorKey)
diff --git a/api/index.yaml b/api/index.yaml
index 45b9095..2b984c2 100644
--- a/api/index.yaml
+++ b/api/index.yaml
@@ -15,3 +15,8 @@ indexes:
   - name: commentType
   - name: timeSent
     direction: desc
+
+- kind: GridPoints
+  ancestor: yes
+  properties:
+  - name: lat
